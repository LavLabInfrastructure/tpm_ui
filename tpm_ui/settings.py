"""
Django settings for tpm_ui project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import logging
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$mu^@#ywz@vd6!y8%=#eqlwtj&wyv0furh(y(^wvg+_9&dw^ey'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djangosaml2',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tpm_ui.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['tpm_ui/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tpm_ui.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / "static"]
SAML_ALLOWED_HOSTS = ['/saml2/login/', '/saml2/logout/']
ACS_DEFAULT_REDIRECT_URL = '/home/'
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AUTHENTICATION CONFIGURATION
def _parse_page_configuration(page_config):
    global TPM_PAGES
    pages = []
    paths = []
    for page in page_config:
        # Make sure to validate the keys as per your requirements
        if 'name' in page and 'path' in page and 'backend' in page:
            parsed_page = {
                'name': page['name'],
                'path': page['path'],
                'backend': page['backend'],
                'pattern': page.get('pattern', '.*'),
            }
            paths.append(page['path'])
            pages.append(parsed_page)
        else:
            print("Invalid page configuration")
    TPM_PAGES = pages
    return paths

def enable_saml(saml_config):
    import saml2
    global SAML_CONFIG, SAML_DEFAULT_BINDING, SAML_LOGOUT_REQUEST_PREFERRED_BINDING, MIDDLEWARE, LOGIN_URL, LOGOUT_URL, AUTHENTICATION_BACKENDS
    SAML_CONFIG = saml_config
    LOGIN_URL = '/saml2/login/'
    LOGOUT_URL = '/saml2/logout/'
    # SAML_DJANGO_USER_MAIN_ATTRIBUTE = 'email'
    SAML_DEFAULT_BINDING = saml2.BINDING_HTTP_REDIRECT
    MIDDLEWARE.append('djangosaml2.middleware.SamlSessionMiddleware')
    
    AUTHENTICATION_BACKENDS = (
        'django.contrib.auth.backends.ModelBackend',
        'djangosaml2.backends.Saml2Backend',
    )
    SAML_LOGOUT_REQUEST_PREFERRED_BINDING = saml2.BINDING_HTTP_REDIRECT

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'djangosaml2': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'saml2': {
            'handlers': ['console'],
            'level': 'DEBUG',
        }
    },
}
# SECURITY CONFIGURATION
AUTH_ENABLED = False 
def _parse_security_configuration(security_config, paths):
    if 'permissions' in security_config:
        global TPM_PERMISSIONS, AUTH_ENABLED, LOGIN_URL_REDIRECT, LOGOUT_URL_REDIRECT, SESSION_COOKIE_SECURE, SESSION_EXPIRE_AT_BROWSER_CLOSE
        # AUTH_ENABLED = True

        LOGIN_URL_REDIRECT = '/home/'
        LOGOUT_URL_REDIRECT = '/'

        SESSION_COOKIE_SECURE = True

        SESSION_EXPIRE_AT_BROWSER_CLOSE = True
        
        TPM_PERMISSIONS = [{group:set(_paths) & set(paths)} for group, _paths in security_config['permissions'].items() if set(_paths) & set(paths)]

        if 'saml' in security_config:
            enable_saml(security_config['saml'])
        else:
            logging.warning("No authentication method found! There will be no authentication.")
    else: 
        logging.warning("No permissions defined in security configuration! There will be no access control.")

# CONFIGURATION FILE
def parse_configuration(filename):
    config = {"pages": {}, "security": {}}
    if filename.endswith('.yaml') or filename.endswith('.yml'):
        import yaml
        with open(filename, 'r') as f:
            config = yaml.load(f, Loader=yaml.FullLoader)
    else:
        logging.error(f"Invalid configuration file: {filename}")

    if 'pages' in config:
        paths = _parse_page_configuration(config['pages'])
        if 'security' in config:
            _parse_security_configuration(config['security'], paths)
        else:
            logging.warning("No security configuration found! There will be no access control.")
    else:
        raise Exception("Invalid configuration file")

parse_configuration('example.yml')